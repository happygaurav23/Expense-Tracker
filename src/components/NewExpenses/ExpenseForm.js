import React from "react";

import './ExpenseForm.css';
export default function ExpenseForm(props){


//JavaScript allows us to listen to an input’s change in value by providing the attribute onchange. React’s version of the onchange event handler is the same, but camel-cased.

//If you’re using forms inside of a React component, it’s a good idea to understand how the onChange event handler works with forms, state, and how you can pass the value to a function.

//The Event interface represents an event which takes place in the DOM.

//An event can be triggered by the user action e.g. clicking the mouse button or tapping keyboard,
// or generated by APIs to represent the progress of an asynchronous task.
// When a event listener's event occurs and it calls its associated function, it also passes a single argument to the function—a reference to the event object The event object contains a number of properties that describe the event that occurred
//in titleClickHandler we get event object that contains different properties
// why we are doing this bcz we want the form input values entered by the user to get stored somewhere so later we can use it to show the expense chart component
// now to save the state of the object even if this component executes multiple times we can use useState() to preserve the value
//one thing to remember we can have multiple states per component bcz we are using multiple states here in this component

    const[enteredTitle,setEnteredTitle] = React.useState('');
    const[amountEntered,setEnteredAmount] = React.useState('');
    const[dateEntered,setEnteredDate] = React.useState('');


    // let's say whenever we want to update something to our current state and we depend on our prevstate so we can do like this inside this setEnteredTitle() we'll have another function that will receive the prevState and based on that state we'll update the current state like this

    // function titleClickHandler(event){

    //    setEnteredTitle((prevState) => {

    //     return {...prevState , enteredTitle : event.target.value }

    //    });

    //}

    function titleClickHandler(event){
        setEnteredTitle(event.target.value);

    } 

    function amountChangeHandler(event){
        setEnteredAmount(event.target.value);

    }

    function dateChangeHandler(event){
        setEnteredDate(event.target.value);
    }


    //whenever you submit the form the page will get reloaded to server which is hosting the page which is in this case our development server but that's not what we want here and to prevent that behaviour we'll use event object and one of its properties


    function formHandler(event){

        event.preventDefault();
        // now we have stopped the default behaviour of reloading now we can gather our data so
        const expenseData = {
            title:enteredTitle,
           // amount: +amountEntered,
            amount: amountEntered,
            date:new Date(dateEntered)
        };

        props.onSaveExpenseData(expenseData);

        //now we want to reset the value of the form after submitting the button and to do that task we'll use the concept of two way binding by simply using states property of react here
        //what two way binding means for inputs we don't just listen to changes but also we can pass a new value back into the inputs so that we can reset or change the inputs programmatically and to do that we'll use the value atttribute on the inputs
        setEnteredTitle('');
        setEnteredAmount('');
        setEnteredDate('');



    }






    return <form onSubmit={formHandler}>

        <div className="new-expense__controls">

            <div className="new-expense__control">
                <label>Title</label>
                <input type='text' value={enteredTitle} onChange={titleClickHandler} />
            </div>

            <div className="new-expense__control">
                <label>Amount</label>
                <input type='number' min='0.01' step='0.01' value={amountEntered} onChange={amountChangeHandler} />
            </div>

            <div className="new-expense__control">
                <label>Date</label>
                <input type='date' min='2019-01-01' max='2023-12-31' value={dateEntered} onChange={dateChangeHandler} />
            </div>

        </div>
        <div className="new-expense__actions">


            <button type="button" onClick={props.onCancel}>Cancel</button>
            <button type="submit">Add New Expense</button>


        </div>



    </form>


}

